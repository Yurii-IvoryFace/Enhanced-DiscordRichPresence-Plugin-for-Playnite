# Discord Rich Presence Plugin - Development ToDo

## 🚀 Priority Tasks

### 1. Library Scanner & Auto-Mapping
**Goal:** Automatic generation of game mappings from Playnite library

- [X] **Create LibraryScannerService**

### 2. Image Management System
**Goal:** Automatic download and management of game cover images

- [X] **Create ImageManagerService**
  - [X] Download cover images from Playnite metadata
  - [X] Resize/optimize images for Discord (max 512x512, <256KB)
  - [X] Generate consistent naming scheme
  - [X] Handle missing/broken images gracefully
  - [X] Implement caching mechanism

### 3. Enhanced Rich Presence Display
**Goal:** More engaging and informative Discord presence

- [X] **Dynamic Status Templates**
  - [x] Create multiple status formats (gaming sessions, achievements, etc.)
  - [x] Add time-based variations (just started, playing for X hours)
  - [?] Implement mood/theme-based templates
  - [x] Add support for custom user templates

- [X] **Rich Content Features**
  - [?] Add completion percentage display
  - [?] Show current achievement progress
  - [X] Display session statistics
  - [X] Add co-op/multiplayer indicators
  - [X] Implement game rating display

- [ ] **Interactive Elements**
  - [ ] Enhanced button functionality
  - [ ] Add "Join Game" buttons for multiplayer titles
  - [ ] Create store page links
  - [ ] Add social sharing options

### 4. Internationalization (i18n)
**Goal:** Full English localization and multi-language support

- [ ] **Core Localization**
  - [ ] Create resource files for all user-facing strings
  - [ ] Translate Ukrainian comments to English
  - [ ] Standardize logging messages in English
  - [ ] Update UI text and labels

- [ ] **Multi-language Support Framework**
  - [ ] Implement localization service
  - [ ] Add language selection in settings
  - [ ] Support for additional languages (future)
  - [ ] Dynamic language switching

## 🔧 Technical Improvements

### Code Quality & Architecture
- [ ] **Add Unit Tests**
  - [ ] Service layer testing
  - [ ] Model validation testing
  - [ ] Integration tests for Discord communication

- [ ] **Error Handling Enhancement**
  - [ ] Implement custom exceptions
  - [ ] Add retry mechanisms for network operations
  - [ ] Improve user feedback for errors
  - [ ] Add telemetry/analytics (optional)

- [ ] **Performance Optimization**
  - [ ] Implement async/await patterns consistently
  - [ ] Add memory management for large libraries
  - [ ] Optimize image processing pipeline
  - [ ] Cache frequently accessed data

### Settings & Configuration
- [ ] **Advanced Settings UI**
  - [ ] Create tabbed settings interface
  - [ ] Add preview functionality
  - [ ] Implement settings validation
  - [ ] Add import/export for configurations

- [ ] **User Experience**
  - [ ] Add setup wizard for first-time users
  - [ ] Create troubleshooting tools
  - [ ] Implement health check diagnostics
  - [ ] Add usage statistics dashboard

## 📋 Implementation Phases

### Phase 1: Foundation (Current Status ✅)
- [x] Basic Rich Presence functionality
- [x] Manual game mapping
- [x] Settings system
- [x] Discord IPC communication

### Phase 2: Automation (Next 2-4 weeks)
- [ ] Library scanner implementation
- [ ] Auto-mapping generation
- [ ] Basic image management
- [ ] Enhanced status templates

### Phase 3: Polish (Following 2-3 weeks)
- [ ] Full English localization
- [ ] Advanced UI features
- [ ] Error handling improvements
- [ ] Documentation and testing

### Phase 4: Advanced Features (Future)
- [ ] Multi-language support
- [ ] Cloud synchronization
- [ ] Community features
- [ ] Plugin marketplace integration

## 🎯 Technical Considerations

### Architecture Decisions Needed
- **Image Storage:** Local filesystem vs cloud storage vs Discord assets
- **API Integration:** Discord Developer API limitations and requirements
- **Data Persistence:** Current JSON files vs database for large libraries
- **Update Mechanism:** Automatic vs manual library rescanning

### Potential Challenges
- **Discord Asset Limits:** 300 assets max per application
- **Image Processing:** Memory usage for large image batches  
- **Rate Limiting:** Discord API request limits
- **Platform Compatibility:** Different Playnite configurations

### Success Metrics
- **Performance:** Library scan under 30 seconds for 1000+ games
- **Reliability:** 99%+ successful Discord connections
- **Usability:** Setup process under 5 minutes for new users
- **Compatibility:** Support for all major game platforms in Playnite